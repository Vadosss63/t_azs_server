// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/ya_azs/ya_azs.go

// Package ya_azs is a generated GoMock package.
package ya_azs

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockYaPayRepository is a mock of YaPayRepository interface.
type MockYaPayRepository struct {
	ctrl     *gomock.Controller
	recorder *MockYaPayRepositoryMockRecorder
}

// MockYaPayRepositoryMockRecorder is the mock recorder for MockYaPayRepository.
type MockYaPayRepositoryMockRecorder struct {
	mock *MockYaPayRepository
}

// NewMockYaPayRepository creates a new mock instance.
func NewMockYaPayRepository(ctrl *gomock.Controller) *MockYaPayRepository {
	mock := &MockYaPayRepository{ctrl: ctrl}
	mock.recorder = &MockYaPayRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYaPayRepository) EXPECT() *MockYaPayRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockYaPayRepository) Add(ctx context.Context, idAzs int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, idAzs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockYaPayRepositoryMockRecorder) Add(ctx, idAzs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockYaPayRepository)(nil).Add), ctx, idAzs)
}

// CreateTable mocks base method.
func (m *MockYaPayRepository) CreateTable(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockYaPayRepositoryMockRecorder) CreateTable(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockYaPayRepository)(nil).CreateTable), ctx)
}

// Delete mocks base method.
func (m *MockYaPayRepository) Delete(ctx context.Context, idAzs int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, idAzs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockYaPayRepositoryMockRecorder) Delete(ctx, idAzs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockYaPayRepository)(nil).Delete), ctx, idAzs)
}

// DeleteTable mocks base method.
func (m *MockYaPayRepository) DeleteTable(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTable", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTable indicates an expected call of DeleteTable.
func (mr *MockYaPayRepositoryMockRecorder) DeleteTable(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTable", reflect.TypeOf((*MockYaPayRepository)(nil).DeleteTable), ctx)
}

// GetEnable mocks base method.
func (m *MockYaPayRepository) GetEnable(ctx context.Context, idAzs int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnable", ctx, idAzs)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnable indicates an expected call of GetEnable.
func (mr *MockYaPayRepositoryMockRecorder) GetEnable(ctx, idAzs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnable", reflect.TypeOf((*MockYaPayRepository)(nil).GetEnable), ctx, idAzs)
}

// GetEnableAll mocks base method.
func (m *MockYaPayRepository) GetEnableAll(ctx context.Context) ([]Station, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnableAll", ctx)
	ret0, _ := ret[0].([]Station)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnableAll indicates an expected call of GetEnableAll.
func (mr *MockYaPayRepositoryMockRecorder) GetEnableAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnableAll", reflect.TypeOf((*MockYaPayRepository)(nil).GetEnableAll), ctx)
}

// GetEnableList mocks base method.
func (m *MockYaPayRepository) GetEnableList(ctx context.Context) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnableList", ctx)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnableList indicates an expected call of GetEnableList.
func (mr *MockYaPayRepositoryMockRecorder) GetEnableList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnableList", reflect.TypeOf((*MockYaPayRepository)(nil).GetEnableList), ctx)
}

// GetLocation mocks base method.
func (m *MockYaPayRepository) GetLocation(ctx context.Context, idAzs int) (Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation", ctx, idAzs)
	ret0, _ := ret[0].(Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockYaPayRepositoryMockRecorder) GetLocation(ctx, idAzs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockYaPayRepository)(nil).GetLocation), ctx, idAzs)
}

// UpdateEnable mocks base method.
func (m *MockYaPayRepository) UpdateEnable(ctx context.Context, idAzs int, isEnable bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnable", ctx, idAzs, isEnable)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnable indicates an expected call of UpdateEnable.
func (mr *MockYaPayRepositoryMockRecorder) UpdateEnable(ctx, idAzs, isEnable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnable", reflect.TypeOf((*MockYaPayRepository)(nil).UpdateEnable), ctx, idAzs, isEnable)
}

// UpdateLocation mocks base method.
func (m *MockYaPayRepository) UpdateLocation(ctx context.Context, idAzs int, location Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocation", ctx, idAzs, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLocation indicates an expected call of UpdateLocation.
func (mr *MockYaPayRepositoryMockRecorder) UpdateLocation(ctx, idAzs, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocation", reflect.TypeOf((*MockYaPayRepository)(nil).UpdateLocation), ctx, idAzs, location)
}
