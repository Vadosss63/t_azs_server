// Code generated by MockGen. DO NOT EDIT.
// Source: updater_button.go

// Package updater_button is a generated GoMock package.
package updater_button

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUpdaterButtonRepository is a mock of UpdaterButtonRepository interface.
type MockUpdaterButtonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterButtonRepositoryMockRecorder
}

// MockUpdaterButtonRepositoryMockRecorder is the mock recorder for MockUpdaterButtonRepository.
type MockUpdaterButtonRepositoryMockRecorder struct {
	mock *MockUpdaterButtonRepository
}

// NewMockUpdaterButtonRepository creates a new mock instance.
func NewMockUpdaterButtonRepository(ctrl *gomock.Controller) *MockUpdaterButtonRepository {
	mock := &MockUpdaterButtonRepository{ctrl: ctrl}
	mock.recorder = &MockUpdaterButtonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdaterButtonRepository) EXPECT() *MockUpdaterButtonRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockUpdaterButtonRepository) Add(ctx context.Context, id_azs int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, id_azs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockUpdaterButtonRepositoryMockRecorder) Add(ctx, id_azs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUpdaterButtonRepository)(nil).Add), ctx, id_azs)
}

// CreateTable mocks base method.
func (m *MockUpdaterButtonRepository) CreateTable(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockUpdaterButtonRepositoryMockRecorder) CreateTable(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockUpdaterButtonRepository)(nil).CreateTable), ctx)
}

// Delete mocks base method.
func (m *MockUpdaterButtonRepository) Delete(ctx context.Context, id_azs int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id_azs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUpdaterButtonRepositoryMockRecorder) Delete(ctx, id_azs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUpdaterButtonRepository)(nil).Delete), ctx, id_azs)
}

// DeleteTable mocks base method.
func (m *MockUpdaterButtonRepository) DeleteTable(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTable", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTable indicates an expected call of DeleteTable.
func (mr *MockUpdaterButtonRepositoryMockRecorder) DeleteTable(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTable", reflect.TypeOf((*MockUpdaterButtonRepository)(nil).DeleteTable), ctx)
}

// Get mocks base method.
func (m *MockUpdaterButtonRepository) Get(ctx context.Context, id_azs int) (UpdateCommand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id_azs)
	ret0, _ := ret[0].(UpdateCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUpdaterButtonRepositoryMockRecorder) Get(ctx, id_azs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUpdaterButtonRepository)(nil).Get), ctx, id_azs)
}

// GetAll mocks base method.
func (m *MockUpdaterButtonRepository) GetAll(ctx context.Context) ([]UpdateCommand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]UpdateCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUpdaterButtonRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUpdaterButtonRepository)(nil).GetAll), ctx)
}

// Update mocks base method.
func (m *MockUpdaterButtonRepository) Update(ctx context.Context, id_azs int, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id_azs, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUpdaterButtonRepositoryMockRecorder) Update(ctx, id_azs, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdaterButtonRepository)(nil).Update), ctx, id_azs, url)
}
