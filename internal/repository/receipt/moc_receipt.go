// Code generated by MockGen. DO NOT EDIT.
// Source: receipt.go

// Package receipt is a generated GoMock package.
package receipt

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockReceiptRepository is a mock of ReceiptRepository interface.
type MockReceiptRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReceiptRepositoryMockRecorder
}

// MockReceiptRepositoryMockRecorder is the mock recorder for MockReceiptRepository.
type MockReceiptRepositoryMockRecorder struct {
	mock *MockReceiptRepository
}

// NewMockReceiptRepository creates a new mock instance.
func NewMockReceiptRepository(ctrl *gomock.Controller) *MockReceiptRepository {
	mock := &MockReceiptRepository{ctrl: ctrl}
	mock.recorder = &MockReceiptRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiptRepository) EXPECT() *MockReceiptRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockReceiptRepository) Add(ctx context.Context, id_azs int, receipt Receipt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, id_azs, receipt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockReceiptRepositoryMockRecorder) Add(ctx, id_azs, receipt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockReceiptRepository)(nil).Add), ctx, id_azs, receipt)
}

// CreateReceipt mocks base method.
func (m *MockReceiptRepository) CreateReceipt(ctx context.Context, id_azs int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReceipt", ctx, id_azs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReceipt indicates an expected call of CreateReceipt.
func (mr *MockReceiptRepositoryMockRecorder) CreateReceipt(ctx, id_azs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReceipt", reflect.TypeOf((*MockReceiptRepository)(nil).CreateReceipt), ctx, id_azs)
}

// DeleteAll mocks base method.
func (m *MockReceiptRepository) DeleteAll(ctx context.Context, id_azs int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, id_azs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockReceiptRepositoryMockRecorder) DeleteAll(ctx, id_azs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockReceiptRepository)(nil).DeleteAll), ctx, id_azs)
}

// GetFilteredReceipts mocks base method.
func (m *MockReceiptRepository) GetFilteredReceipts(ctx context.Context, id_azs int, filter FilterParams) ([]Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredReceipts", ctx, id_azs, filter)
	ret0, _ := ret[0].([]Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredReceipts indicates an expected call of GetFilteredReceipts.
func (mr *MockReceiptRepositoryMockRecorder) GetFilteredReceipts(ctx, id_azs, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredReceipts", reflect.TypeOf((*MockReceiptRepository)(nil).GetFilteredReceipts), ctx, id_azs, filter)
}
