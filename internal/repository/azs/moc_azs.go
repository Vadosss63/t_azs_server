// Code generated by MockGen. DO NOT EDIT.
// Source: azs.go

// Package azs is a generated GoMock package.
package azs

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAzsRepository is a mock of AzsRepository interface.
type MockAzsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAzsRepositoryMockRecorder
}

// MockAzsRepositoryMockRecorder is the mock recorder for MockAzsRepository.
type MockAzsRepositoryMockRecorder struct {
	mock *MockAzsRepository
}

// NewMockAzsRepository creates a new mock instance.
func NewMockAzsRepository(ctrl *gomock.Controller) *MockAzsRepository {
	mock := &MockAzsRepository{ctrl: ctrl}
	mock.recorder = &MockAzsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzsRepository) EXPECT() *MockAzsRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAzsRepository) Add(ctx context.Context, id_azs, is_authorized, count_colum, is_second_price int, time, name, address, stats string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, id_azs, is_authorized, count_colum, is_second_price, time, name, address, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockAzsRepositoryMockRecorder) Add(ctx, id_azs, is_authorized, count_colum, is_second_price, time, name, address, stats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAzsRepository)(nil).Add), ctx, id_azs, is_authorized, count_colum, is_second_price, time, name, address, stats)
}

// AddAzsToUser mocks base method.
func (m *MockAzsRepository) AddAzsToUser(ctx context.Context, id_user, id_azs int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAzsToUser", ctx, id_user, id_azs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAzsToUser indicates an expected call of AddAzsToUser.
func (mr *MockAzsRepositoryMockRecorder) AddAzsToUser(ctx, id_user, id_azs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAzsToUser", reflect.TypeOf((*MockAzsRepository)(nil).AddAzsToUser), ctx, id_user, id_azs)
}

// Delete mocks base method.
func (m *MockAzsRepository) Delete(ctx context.Context, id_azs int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id_azs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAzsRepositoryMockRecorder) Delete(ctx, id_azs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAzsRepository)(nil).Delete), ctx, id_azs)
}

// Get mocks base method.
func (m *MockAzsRepository) Get(ctx context.Context, id_azs int) (AzsStatsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id_azs)
	ret0, _ := ret[0].(AzsStatsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAzsRepositoryMockRecorder) Get(ctx, id_azs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAzsRepository)(nil).Get), ctx, id_azs)
}

// GetAll mocks base method.
func (m *MockAzsRepository) GetAll(ctx context.Context) ([]AzsStatsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]AzsStatsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAzsRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAzsRepository)(nil).GetAll), ctx)
}

// GetAzsAllForUser mocks base method.
func (m *MockAzsRepository) GetAzsAllForUser(ctx context.Context, id_user int) ([]AzsStatsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzsAllForUser", ctx, id_user)
	ret0, _ := ret[0].([]AzsStatsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzsAllForUser indicates an expected call of GetAzsAllForUser.
func (mr *MockAzsRepositoryMockRecorder) GetAzsAllForUser(ctx, id_user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzsAllForUser", reflect.TypeOf((*MockAzsRepository)(nil).GetAzsAllForUser), ctx, id_user)
}

// RemoveUserFromAzsAll mocks base method.
func (m *MockAzsRepository) RemoveUserFromAzsAll(ctx context.Context, id_user int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromAzsAll", ctx, id_user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromAzsAll indicates an expected call of RemoveUserFromAzsAll.
func (mr *MockAzsRepositoryMockRecorder) RemoveUserFromAzsAll(ctx, id_user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromAzsAll", reflect.TypeOf((*MockAzsRepository)(nil).RemoveUserFromAzsAll), ctx, id_user)
}

// Update mocks base method.
func (m *MockAzsRepository) Update(ctx context.Context, azs AzsStatsData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, azs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAzsRepositoryMockRecorder) Update(ctx, azs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAzsRepository)(nil).Update), ctx, azs)
}
