// Code generated by MockGen. DO NOT EDIT.
// Source: azs_button.go

// Package azs_button is a generated GoMock package.
package azs_button

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAzsButtonRepository is a mock of AzsButtonRepository interface.
type MockAzsButtonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAzsButtonRepositoryMockRecorder
}

// MockAzsButtonRepositoryMockRecorder is the mock recorder for MockAzsButtonRepository.
type MockAzsButtonRepositoryMockRecorder struct {
	mock *MockAzsButtonRepository
}

// NewMockAzsButtonRepository creates a new mock instance.
func NewMockAzsButtonRepository(ctrl *gomock.Controller) *MockAzsButtonRepository {
	mock := &MockAzsButtonRepository{ctrl: ctrl}
	mock.recorder = &MockAzsButtonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzsButtonRepository) EXPECT() *MockAzsButtonRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAzsButtonRepository) Add(ctx context.Context, idAzs int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, idAzs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockAzsButtonRepositoryMockRecorder) Add(ctx, idAzs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAzsButtonRepository)(nil).Add), ctx, idAzs)
}

// CreateTable mocks base method.
func (m *MockAzsButtonRepository) CreateTable(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockAzsButtonRepositoryMockRecorder) CreateTable(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockAzsButtonRepository)(nil).CreateTable), ctx)
}

// Delete mocks base method.
func (m *MockAzsButtonRepository) Delete(ctx context.Context, idAzs int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, idAzs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAzsButtonRepositoryMockRecorder) Delete(ctx, idAzs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAzsButtonRepository)(nil).Delete), ctx, idAzs)
}

// DeleteTable mocks base method.
func (m *MockAzsButtonRepository) DeleteTable(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTable", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTable indicates an expected call of DeleteTable.
func (mr *MockAzsButtonRepositoryMockRecorder) DeleteTable(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTable", reflect.TypeOf((*MockAzsButtonRepository)(nil).DeleteTable), ctx)
}

// Get mocks base method.
func (m *MockAzsButtonRepository) Get(ctx context.Context, idAzs int) (AzsButton, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, idAzs)
	ret0, _ := ret[0].(AzsButton)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAzsButtonRepositoryMockRecorder) Get(ctx, idAzs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAzsButtonRepository)(nil).Get), ctx, idAzs)
}

// GetAll mocks base method.
func (m *MockAzsButtonRepository) GetAll(ctx context.Context) ([]AzsButton, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]AzsButton)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAzsButtonRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAzsButtonRepository)(nil).GetAll), ctx)
}

// Update mocks base method.
func (m *MockAzsButtonRepository) Update(ctx context.Context, idAzs, price, button int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, idAzs, price, button)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAzsButtonRepositoryMockRecorder) Update(ctx, idAzs, price, button interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAzsButtonRepository)(nil).Update), ctx, idAzs, price, button)
}
